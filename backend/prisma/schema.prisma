// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String   @unique
  password    String?  // Optional for now, can be added later for auth
  otherBrands String?  // For brands not in our list
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  userBrands  UserBrand[]
  alerts      Alert[]
  
  @@map("users")
}

model Brand {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  userBrands UserBrand[]
  
  @@map("brands")
}

model UserBrand {
  id      String @id @default(cuid())
  userId  String
  brandId String
  
  // Relationships
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  brand   Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)
  
  // Ensure a user can't select the same brand twice
  @@unique([userId, brandId])
  @@map("user_brands")
}

model Product {
  id        Int      @id @default(autoincrement())
  awinId    Int      @unique
  retailer  String   // Shop/retailer name
  brand     String
  name      String
  price     Float
  discount  Float
  url       String
  imageUrl  String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  
  @@map("products")
}

model Alert {
  id          Int      @id @default(autoincrement())
  userId      String   // Changed to String to match User.id type
  brand       String
  discountPct Float
  createdAt   DateTime @default(now())
  
  // Relationships
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("alerts")
}